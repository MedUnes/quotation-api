import * as _stoplight_spectral_functions from '@stoplight/spectral-functions';
import * as _stoplight_spectral_core from '@stoplight/spectral-core';
import { DiagnosticSeverity } from '@stoplight/types';

declare const _default: {
    formats: _stoplight_spectral_core.Format<void>[];
    aliases: {
        ArrayProperties: {
            targets: {
                formats: _stoplight_spectral_core.Format<void>[];
                given: string[];
            }[];
        };
        IntegerProperties: {
            targets: {
                formats: _stoplight_spectral_core.Format<void>[];
                given: string[];
            }[];
        };
        StringProperties: {
            targets: {
                formats: _stoplight_spectral_core.Format<void>[];
                given: string[];
            }[];
        };
    };
    rules: {
        /**
         * API1:2019 - Broken Object Level Authorization
         *
         * Use case
         * - ‚ùå API call parameters use the ID of the resource accessed through the API /api/shop1/financial_info.
         * - ‚ùå Attackers replace the IDs of their resources with a different one which they guessed through /api/shop2/financial_info.
         * - ‚ùå The API does not check permissions and lets the call through.
         * - ‚úÖ Problem is aggravated if IDs can be enumerated /api/123/financial_info.
         *
         * How to prevent
         * - ‚ùå Implement authorization checks with user policies and hierarchy.
         * - ‚ùå Do not rely on IDs that the client sends. Use IDs stored in the session object instead.
         * - ‚ùå Check authorization for each client request to access database.
         * - ‚úÖ Use random IDs that cannot be guessed (UUIDs).
         */
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api1:2019-no-numeric-ids": {
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, _stoplight_spectral_functions.SchemaOptions>;
                functionOptions: {
                    schema: {
                        type: string;
                        not: {
                            properties: {
                                type: {
                                    const: string;
                                };
                            };
                        };
                        properties: {
                            format: {
                                const: string;
                            };
                        };
                    };
                };
            };
        };
        /**
         * API2:2019 ‚Äî Broken authentication
         *
         * Use case
         * - ‚úÖ Unprotected APIs that are considered ‚Äúinternal‚Äù
         * - ‚úÖ Weak authentication that does not follow industry best practices
         * - ‚úÖ Weak API keys that are not rotated
         * - ‚ùå Passwords that are weak, plain text, encrypted, poorly hashed, shared, or default passwords
         * - ü§∑ Authentication susceptible to brute force attacks and credential stuffing
         * - ‚úÖ Credentials and keys included in URLs
         * - ‚úÖ Lack of access token validation (including JWT validation)
         * - ‚úÖ Unsigned or weakly signed non-expiring JWTs
         *
         * How to prevent
         * - ‚ùå APIs for password reset and one-time links also allow users to authenticate, and should be protected just as rigorously.
         * - ‚úÖ Use standard authentication, token generation, password storage, and multi-factor authentication (MFA).
         * - ‚ùå Use short-lived access tokens.
         * - ‚úÖ Authenticate your apps (so you know who is talking to you).
         * - ‚ùå Use stricter rate-limiting for authentication, and implement lockout policies and weak password checks.
         */
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api2:2019-no-http-basic": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<string, _stoplight_spectral_functions.PatternOptions>;
                functionOptions: {
                    notMatch: string;
                };
            };
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/rules/secrets-parameters.yml
         */
        "owasp:api2:2019-no-api-keys-in-url": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string[];
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<string, _stoplight_spectral_functions.PatternOptions>;
                functionOptions: {
                    notMatch: string;
                };
            }[];
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/rules/secrets-parameters.yml
         */
        "owasp:api2:2019-no-credentials-in-url": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string[];
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<string, _stoplight_spectral_functions.PatternOptions>;
                functionOptions: {
                    notMatch: string;
                };
            }[];
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/security/securitySchemes_insecure.yml#L38
         */
        "owasp:api2:2019-auth-insecure-schemes": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string[];
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<string, _stoplight_spectral_functions.PatternOptions>;
                functionOptions: {
                    notMatch: string;
                };
            }[];
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/security/securitySchemes.yml
         */
        "owasp:api2:2019-jwt-best-practices": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string[];
            then: ({
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
                functionOptions?: undefined;
            } | {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<string, _stoplight_spectral_functions.PatternOptions>;
                functionOptions: {
                    match: string;
                };
            })[];
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/security/security.yml
         */
        "owasp:api2:2019-protection-global-unsafe": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<any, any>;
                functionOptions: {
                    schemesPath: string[];
                    nullable: boolean;
                    methods: string[];
                };
            }[];
        };
        "owasp:api2:2019-protection-global-unsafe-strict": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<any, any>;
                functionOptions: {
                    schemesPath: string[];
                    nullable: boolean;
                    methods: string[];
                };
            }[];
        };
        "owasp:api2:2019-protection-global-safe": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<any, any>;
                functionOptions: {
                    schemesPath: string[];
                    nullable: boolean;
                    methods: string[];
                };
            }[];
        };
        /**
         * API3:2019 ‚Äî Excessive data exposure
         *
         * Use case
         * - ‚ùå The API returns full data objects as they are stored in the backend database.
         * - ‚ùå The client application filters the responses and only shows the data that the users really need to see.
         * - ‚ùå Attackers call the API directly and get also the sensitive data that the UI would filter out.
         *
         * How to prevent
         * - ‚ùå Never rely on the client to filter data!
         * - ‚ùå Review all API responses and adapt them to match what the API consumers really need.
         * - ‚ùå Carefully define schemas for all the API responses.
         * - ‚úÖ Do not forget about error responses, define proper schemas as well.
         * - üü† Identify all the sensitive data or Personally Identifiable Information (PII), and justify its use.
         * https://github.com/stoplightio/spectral-owasp-ruleset/issues/11
         * - ‚ùå Enforce response checks to prevent accidental leaks of data or exceptions.
         */
        /**
         * @author: Jason Harmon <https://github.com/jharmn>
         */
        "owasp:api3:2019-define-error-validation": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, _stoplight_spectral_functions.SchemaOptions>;
                functionOptions: {
                    schema: {
                        type: string;
                        anyOf: {
                            required: string[];
                        }[];
                    };
                };
            }[];
        };
        /**
         * @author: Jason Harmon <https://github.com/jharmn>
         */
        "owasp:api3:2019-define-error-responses-401": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * @author: Jason Harmon <https://github.com/jharmn>
         */
        "owasp:api3:2019-define-error-responses-500": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * API4:2019 ‚Äî Lack of resources and rate limiting
         *
         * Use case
         * - üü† Attackers overload the API by sending more requests than it can handle.
         * - ‚úÖ Attackers send requests at a rate exceeding the API's processing speed, clogging it up.
         * - ‚úÖ The size of the requests or some fields in them exceed what the API can process.
         * - üü† ‚ÄúZip bombs‚Äù, archive files that have been designed so that unpacking them takes excessive amount of resources and overloads the API.
         *
         * How to prevent
         * - ‚úÖ Define proper rate limiting.
         * - ‚úÖ Limit maximums on request parameter sizes
         * - ‚ùå Tailor the rate limiting to be match what API methods, clients, or addresses need or should be allowed to get.
         * - ‚ùå Add checks on compression ratios.
         * - ‚ùå Define limits for container resources.
         * - üü† PS: Look for Zip uploads and warn about setting max file size? how do we know if they did? Demand something in the description?
         */
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-rate-limit": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, _stoplight_spectral_functions.SchemaOptions>;
                functionOptions: {
                    schema: {
                        type: string;
                        oneOf: {
                            required: string[];
                        }[];
                    };
                };
            };
        };
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-rate-limit-retry-after": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            };
        };
        /**
         * @author: Jason Harmon <https://github.com/jharmn>
         */
        "owasp:api4:2019-rate-limit-responses-429": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/security/array.yml
         */
        "owasp:api4:2019-array-limit": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            };
        };
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-string-limit": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, _stoplight_spectral_functions.SchemaOptions>;
                functionOptions: {
                    schema: {
                        type: string;
                        oneOf: {
                            required: string[];
                        }[];
                    };
                };
            };
        };
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-string-restricted": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, _stoplight_spectral_functions.SchemaOptions>;
                functionOptions: {
                    schema: {
                        type: string;
                        oneOf: {
                            required: string[];
                        }[];
                    };
                };
            };
        };
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-integer-limit": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<Record<string, unknown>, _stoplight_spectral_functions.XorOptions>;
                functionOptions: {
                    properties: string[];
                };
            }[];
        };
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-integer-limit-legacy": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * @author: Phil Sturgeon <https://github.com/philsturgeon>
         */
        "owasp:api4:2019-integer-format": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * API5:2019 ‚Äî Broken function level authorization
         *
         * - Don‚Äôt assume that an API endpoint is regular or administrative only based on the URL path.
         * - Do not rely on the client to enforce admin access.
         * - Deny all access by default.
         */
        /**
         * API6:2019 ‚Äî Mass assignment
         *
         * The API takes data that client provides and stores it without proper filtering for safelisted properties. Attackers can try to guess object properties or provide additional object properties in their requests, read the documentation, or check out API endpoints for clues where to find the openings to modify properties they are not supposed to on the data objects stored in the backend.
         *
         * Use case
         *
         * - ‚ùå The API works with the data structures without proper filtering.
         * - ‚ùå Received payload is blindly transformed into an object and stored.
         * - ‚ùå Attackers can guess the fields by looking at the GET request data.
         *
         * How to prevent
         * - ‚ùå Do not automatically bind incoming data and internal objects.
         * - ‚úÖ Explicitly define all the parameters and payloads you are expecting.
         * - üü† Use the readOnly property set to true in object schemas for all properties that can be retrieved through APIs but should never be modified.
         * - ‚ùå Precisely define the schemas, types, and patterns you will accept in requests at design time and enforce them at runtime.
         */
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/security/objects.yml
         */
        "owasp:api6:2019-no-additionalProperties": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * @author: Roberto Polli <https://github.com/ioggstream>
         * @see: https://github.com/italia/api-oas-checker/blob/master/security/objects.yml
         */
        "owasp:api6:2019-constrained-additionalProperties": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                field: string;
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, null>;
            }[];
        };
        /**
         * API7:2019 ‚Äî Security misconfiguration
         *
         * Poor configuration of the API servers allows attackers to exploit them.
         *
         * Use case
         * - ‚ùå Unpatched systems
         * - ‚ùå Unprotected files and directories
         * - ‚ùå Unhardened images
         * - ‚úÖ Missing, outdated, or misconfigured TLS
         * - ‚ùå Exposed storage or server management panels
         * - üü† Missing CORS policy or security headers
         * https://github.com/stoplightio/spectral-owasp-ruleset/issues/5
         * - üü† Error messages with stack traces
         * https://github.com/stoplightio/spectral-owasp-ruleset/issues/12
         * - ‚ùå Unnecessary features enabled
         *
         * How to prevent
         * - ‚ùå Establish repeatable hardening and patching processes.
         * - ‚ùå Automate locating configuration flaws.
         * - ‚ùå Disable unnecessary features.
         * - ‚ùå Restrict administrative access.
         * - ‚úÖ Define and enforce all outputs, including errors.
         */
        /**
         * @author: Andrzej <https://github.com/jerzyn>
         */
        "owasp:api7:2019-security-hosts-https-oas2": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<unknown, _stoplight_spectral_functions.SchemaOptions>;
                functionOptions: {
                    schema: {
                        type: string;
                        items: {
                            type: string;
                            const: string;
                        };
                    };
                };
            };
        };
        /**
         * @author: Andrzej <https://github.com/jerzyn>
         */
        "owasp:api7:2019-security-hosts-https-oas3": {
            message: string;
            description: string;
            severity: DiagnosticSeverity;
            formats: _stoplight_spectral_core.Format<void>[];
            given: string;
            then: {
                function: _stoplight_spectral_core.RulesetFunctionWithValidator<string, _stoplight_spectral_functions.PatternOptions>;
                functionOptions: {
                    match: string;
                };
            };
        };
    };
};

export { _default as default };
